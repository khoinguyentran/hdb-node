/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceControlService_H
#define DeviceControlService_H

#include <TProcessor.h>
#include "CoreServices_types.h"

namespace com { namespace kaisquare { namespace core { namespace thrift {

class DeviceControlServiceIf {
 public:
  virtual ~DeviceControlServiceIf() {}
  virtual void getDeviceStatus(std::string& _return, const std::string& deviceId) = 0;
  virtual void getGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber) = 0;
  virtual void setGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber, const std::string& value) = 0;
  virtual void startPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) = 0;
  virtual void stopPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) = 0;
  virtual void startTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) = 0;
  virtual void stopTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) = 0;
  virtual void startZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) = 0;
  virtual void stopZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) = 0;
  virtual void writeData(std::string& _return, const std::string& deviceId, const std::string& portNumber, const std::vector<int8_t> & data) = 0;
  virtual void readData(std::vector<int8_t> & _return, const std::string& deviceId, const std::string& portNumber) = 0;
};

class DeviceControlServiceIfFactory {
 public:
  typedef DeviceControlServiceIf Handler;

  virtual ~DeviceControlServiceIfFactory() {}

  virtual DeviceControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceControlServiceIf* /* handler */) = 0;
};

class DeviceControlServiceIfSingletonFactory : virtual public DeviceControlServiceIfFactory {
 public:
  DeviceControlServiceIfSingletonFactory(const boost::shared_ptr<DeviceControlServiceIf>& iface) : iface_(iface) {}
  virtual ~DeviceControlServiceIfSingletonFactory() {}

  virtual DeviceControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceControlServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DeviceControlServiceIf> iface_;
};

class DeviceControlServiceNull : virtual public DeviceControlServiceIf {
 public:
  virtual ~DeviceControlServiceNull() {}
  void getDeviceStatus(std::string& /* _return */, const std::string& /* deviceId */) {
    return;
  }
  void getGPIO(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* ioNumber */) {
    return;
  }
  void setGPIO(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* ioNumber */, const std::string& /* value */) {
    return;
  }
  void startPanDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */, const std::string& /* direction */) {
    return;
  }
  void stopPanDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */) {
    return;
  }
  void startTiltDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */, const std::string& /* direction */) {
    return;
  }
  void stopTiltDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */) {
    return;
  }
  void startZoomDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */, const std::string& /* direction */) {
    return;
  }
  void stopZoomDevice(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* channelId */) {
    return;
  }
  void writeData(std::string& /* _return */, const std::string& /* deviceId */, const std::string& /* portNumber */, const std::vector<int8_t> & /* data */) {
    return;
  }
  void readData(std::vector<int8_t> & /* _return */, const std::string& /* deviceId */, const std::string& /* portNumber */) {
    return;
  }
};

typedef struct _DeviceControlService_getDeviceStatus_args__isset {
  _DeviceControlService_getDeviceStatus_args__isset() : deviceId(false) {}
  bool deviceId;
} _DeviceControlService_getDeviceStatus_args__isset;

class DeviceControlService_getDeviceStatus_args {
 public:

  DeviceControlService_getDeviceStatus_args() : deviceId("") {
  }

  virtual ~DeviceControlService_getDeviceStatus_args() throw() {}

  std::string deviceId;

  _DeviceControlService_getDeviceStatus_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  bool operator == (const DeviceControlService_getDeviceStatus_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_getDeviceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_getDeviceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_getDeviceStatus_pargs {
 public:


  virtual ~DeviceControlService_getDeviceStatus_pargs() throw() {}

  const std::string* deviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_getDeviceStatus_result__isset {
  _DeviceControlService_getDeviceStatus_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_getDeviceStatus_result__isset;

class DeviceControlService_getDeviceStatus_result {
 public:

  DeviceControlService_getDeviceStatus_result() : success("") {
  }

  virtual ~DeviceControlService_getDeviceStatus_result() throw() {}

  std::string success;

  _DeviceControlService_getDeviceStatus_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_getDeviceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_getDeviceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_getDeviceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_getDeviceStatus_presult__isset {
  _DeviceControlService_getDeviceStatus_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_getDeviceStatus_presult__isset;

class DeviceControlService_getDeviceStatus_presult {
 public:


  virtual ~DeviceControlService_getDeviceStatus_presult() throw() {}

  std::string* success;

  _DeviceControlService_getDeviceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_getGPIO_args__isset {
  _DeviceControlService_getGPIO_args__isset() : deviceId(false), ioNumber(false) {}
  bool deviceId;
  bool ioNumber;
} _DeviceControlService_getGPIO_args__isset;

class DeviceControlService_getGPIO_args {
 public:

  DeviceControlService_getGPIO_args() : deviceId(""), ioNumber("") {
  }

  virtual ~DeviceControlService_getGPIO_args() throw() {}

  std::string deviceId;
  std::string ioNumber;

  _DeviceControlService_getGPIO_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_ioNumber(const std::string& val) {
    ioNumber = val;
  }

  bool operator == (const DeviceControlService_getGPIO_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(ioNumber == rhs.ioNumber))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_getGPIO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_getGPIO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_getGPIO_pargs {
 public:


  virtual ~DeviceControlService_getGPIO_pargs() throw() {}

  const std::string* deviceId;
  const std::string* ioNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_getGPIO_result__isset {
  _DeviceControlService_getGPIO_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_getGPIO_result__isset;

class DeviceControlService_getGPIO_result {
 public:

  DeviceControlService_getGPIO_result() : success("") {
  }

  virtual ~DeviceControlService_getGPIO_result() throw() {}

  std::string success;

  _DeviceControlService_getGPIO_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_getGPIO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_getGPIO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_getGPIO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_getGPIO_presult__isset {
  _DeviceControlService_getGPIO_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_getGPIO_presult__isset;

class DeviceControlService_getGPIO_presult {
 public:


  virtual ~DeviceControlService_getGPIO_presult() throw() {}

  std::string* success;

  _DeviceControlService_getGPIO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_setGPIO_args__isset {
  _DeviceControlService_setGPIO_args__isset() : deviceId(false), ioNumber(false), value(false) {}
  bool deviceId;
  bool ioNumber;
  bool value;
} _DeviceControlService_setGPIO_args__isset;

class DeviceControlService_setGPIO_args {
 public:

  DeviceControlService_setGPIO_args() : deviceId(""), ioNumber(""), value("") {
  }

  virtual ~DeviceControlService_setGPIO_args() throw() {}

  std::string deviceId;
  std::string ioNumber;
  std::string value;

  _DeviceControlService_setGPIO_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_ioNumber(const std::string& val) {
    ioNumber = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const DeviceControlService_setGPIO_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(ioNumber == rhs.ioNumber))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_setGPIO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_setGPIO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_setGPIO_pargs {
 public:


  virtual ~DeviceControlService_setGPIO_pargs() throw() {}

  const std::string* deviceId;
  const std::string* ioNumber;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_setGPIO_result__isset {
  _DeviceControlService_setGPIO_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_setGPIO_result__isset;

class DeviceControlService_setGPIO_result {
 public:

  DeviceControlService_setGPIO_result() : success("") {
  }

  virtual ~DeviceControlService_setGPIO_result() throw() {}

  std::string success;

  _DeviceControlService_setGPIO_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_setGPIO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_setGPIO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_setGPIO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_setGPIO_presult__isset {
  _DeviceControlService_setGPIO_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_setGPIO_presult__isset;

class DeviceControlService_setGPIO_presult {
 public:


  virtual ~DeviceControlService_setGPIO_presult() throw() {}

  std::string* success;

  _DeviceControlService_setGPIO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_startPanDevice_args__isset {
  _DeviceControlService_startPanDevice_args__isset() : deviceId(false), channelId(false), direction(false) {}
  bool deviceId;
  bool channelId;
  bool direction;
} _DeviceControlService_startPanDevice_args__isset;

class DeviceControlService_startPanDevice_args {
 public:

  DeviceControlService_startPanDevice_args() : deviceId(""), channelId(""), direction("") {
  }

  virtual ~DeviceControlService_startPanDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;
  std::string direction;

  _DeviceControlService_startPanDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_direction(const std::string& val) {
    direction = val;
  }

  bool operator == (const DeviceControlService_startPanDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startPanDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startPanDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_startPanDevice_pargs {
 public:


  virtual ~DeviceControlService_startPanDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;
  const std::string* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startPanDevice_result__isset {
  _DeviceControlService_startPanDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_startPanDevice_result__isset;

class DeviceControlService_startPanDevice_result {
 public:

  DeviceControlService_startPanDevice_result() : success("") {
  }

  virtual ~DeviceControlService_startPanDevice_result() throw() {}

  std::string success;

  _DeviceControlService_startPanDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_startPanDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startPanDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startPanDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startPanDevice_presult__isset {
  _DeviceControlService_startPanDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_startPanDevice_presult__isset;

class DeviceControlService_startPanDevice_presult {
 public:


  virtual ~DeviceControlService_startPanDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_startPanDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_stopPanDevice_args__isset {
  _DeviceControlService_stopPanDevice_args__isset() : deviceId(false), channelId(false) {}
  bool deviceId;
  bool channelId;
} _DeviceControlService_stopPanDevice_args__isset;

class DeviceControlService_stopPanDevice_args {
 public:

  DeviceControlService_stopPanDevice_args() : deviceId(""), channelId("") {
  }

  virtual ~DeviceControlService_stopPanDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;

  _DeviceControlService_stopPanDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const DeviceControlService_stopPanDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopPanDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopPanDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_stopPanDevice_pargs {
 public:


  virtual ~DeviceControlService_stopPanDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopPanDevice_result__isset {
  _DeviceControlService_stopPanDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopPanDevice_result__isset;

class DeviceControlService_stopPanDevice_result {
 public:

  DeviceControlService_stopPanDevice_result() : success("") {
  }

  virtual ~DeviceControlService_stopPanDevice_result() throw() {}

  std::string success;

  _DeviceControlService_stopPanDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_stopPanDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopPanDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopPanDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopPanDevice_presult__isset {
  _DeviceControlService_stopPanDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopPanDevice_presult__isset;

class DeviceControlService_stopPanDevice_presult {
 public:


  virtual ~DeviceControlService_stopPanDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_stopPanDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_startTiltDevice_args__isset {
  _DeviceControlService_startTiltDevice_args__isset() : deviceId(false), channelId(false), direction(false) {}
  bool deviceId;
  bool channelId;
  bool direction;
} _DeviceControlService_startTiltDevice_args__isset;

class DeviceControlService_startTiltDevice_args {
 public:

  DeviceControlService_startTiltDevice_args() : deviceId(""), channelId(""), direction("") {
  }

  virtual ~DeviceControlService_startTiltDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;
  std::string direction;

  _DeviceControlService_startTiltDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_direction(const std::string& val) {
    direction = val;
  }

  bool operator == (const DeviceControlService_startTiltDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startTiltDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startTiltDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_startTiltDevice_pargs {
 public:


  virtual ~DeviceControlService_startTiltDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;
  const std::string* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startTiltDevice_result__isset {
  _DeviceControlService_startTiltDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_startTiltDevice_result__isset;

class DeviceControlService_startTiltDevice_result {
 public:

  DeviceControlService_startTiltDevice_result() : success("") {
  }

  virtual ~DeviceControlService_startTiltDevice_result() throw() {}

  std::string success;

  _DeviceControlService_startTiltDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_startTiltDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startTiltDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startTiltDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startTiltDevice_presult__isset {
  _DeviceControlService_startTiltDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_startTiltDevice_presult__isset;

class DeviceControlService_startTiltDevice_presult {
 public:


  virtual ~DeviceControlService_startTiltDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_startTiltDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_stopTiltDevice_args__isset {
  _DeviceControlService_stopTiltDevice_args__isset() : deviceId(false), channelId(false) {}
  bool deviceId;
  bool channelId;
} _DeviceControlService_stopTiltDevice_args__isset;

class DeviceControlService_stopTiltDevice_args {
 public:

  DeviceControlService_stopTiltDevice_args() : deviceId(""), channelId("") {
  }

  virtual ~DeviceControlService_stopTiltDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;

  _DeviceControlService_stopTiltDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const DeviceControlService_stopTiltDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopTiltDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopTiltDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_stopTiltDevice_pargs {
 public:


  virtual ~DeviceControlService_stopTiltDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopTiltDevice_result__isset {
  _DeviceControlService_stopTiltDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopTiltDevice_result__isset;

class DeviceControlService_stopTiltDevice_result {
 public:

  DeviceControlService_stopTiltDevice_result() : success("") {
  }

  virtual ~DeviceControlService_stopTiltDevice_result() throw() {}

  std::string success;

  _DeviceControlService_stopTiltDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_stopTiltDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopTiltDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopTiltDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopTiltDevice_presult__isset {
  _DeviceControlService_stopTiltDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopTiltDevice_presult__isset;

class DeviceControlService_stopTiltDevice_presult {
 public:


  virtual ~DeviceControlService_stopTiltDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_stopTiltDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_startZoomDevice_args__isset {
  _DeviceControlService_startZoomDevice_args__isset() : deviceId(false), channelId(false), direction(false) {}
  bool deviceId;
  bool channelId;
  bool direction;
} _DeviceControlService_startZoomDevice_args__isset;

class DeviceControlService_startZoomDevice_args {
 public:

  DeviceControlService_startZoomDevice_args() : deviceId(""), channelId(""), direction("") {
  }

  virtual ~DeviceControlService_startZoomDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;
  std::string direction;

  _DeviceControlService_startZoomDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_direction(const std::string& val) {
    direction = val;
  }

  bool operator == (const DeviceControlService_startZoomDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startZoomDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startZoomDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_startZoomDevice_pargs {
 public:


  virtual ~DeviceControlService_startZoomDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;
  const std::string* direction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startZoomDevice_result__isset {
  _DeviceControlService_startZoomDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_startZoomDevice_result__isset;

class DeviceControlService_startZoomDevice_result {
 public:

  DeviceControlService_startZoomDevice_result() : success("") {
  }

  virtual ~DeviceControlService_startZoomDevice_result() throw() {}

  std::string success;

  _DeviceControlService_startZoomDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_startZoomDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_startZoomDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_startZoomDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_startZoomDevice_presult__isset {
  _DeviceControlService_startZoomDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_startZoomDevice_presult__isset;

class DeviceControlService_startZoomDevice_presult {
 public:


  virtual ~DeviceControlService_startZoomDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_startZoomDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_stopZoomDevice_args__isset {
  _DeviceControlService_stopZoomDevice_args__isset() : deviceId(false), channelId(false) {}
  bool deviceId;
  bool channelId;
} _DeviceControlService_stopZoomDevice_args__isset;

class DeviceControlService_stopZoomDevice_args {
 public:

  DeviceControlService_stopZoomDevice_args() : deviceId(""), channelId("") {
  }

  virtual ~DeviceControlService_stopZoomDevice_args() throw() {}

  std::string deviceId;
  std::string channelId;

  _DeviceControlService_stopZoomDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const DeviceControlService_stopZoomDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopZoomDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopZoomDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_stopZoomDevice_pargs {
 public:


  virtual ~DeviceControlService_stopZoomDevice_pargs() throw() {}

  const std::string* deviceId;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopZoomDevice_result__isset {
  _DeviceControlService_stopZoomDevice_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopZoomDevice_result__isset;

class DeviceControlService_stopZoomDevice_result {
 public:

  DeviceControlService_stopZoomDevice_result() : success("") {
  }

  virtual ~DeviceControlService_stopZoomDevice_result() throw() {}

  std::string success;

  _DeviceControlService_stopZoomDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_stopZoomDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_stopZoomDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_stopZoomDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_stopZoomDevice_presult__isset {
  _DeviceControlService_stopZoomDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_stopZoomDevice_presult__isset;

class DeviceControlService_stopZoomDevice_presult {
 public:


  virtual ~DeviceControlService_stopZoomDevice_presult() throw() {}

  std::string* success;

  _DeviceControlService_stopZoomDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_writeData_args__isset {
  _DeviceControlService_writeData_args__isset() : deviceId(false), portNumber(false), data(false) {}
  bool deviceId;
  bool portNumber;
  bool data;
} _DeviceControlService_writeData_args__isset;

class DeviceControlService_writeData_args {
 public:

  DeviceControlService_writeData_args() : deviceId(""), portNumber("") {
  }

  virtual ~DeviceControlService_writeData_args() throw() {}

  std::string deviceId;
  std::string portNumber;
  std::vector<int8_t>  data;

  _DeviceControlService_writeData_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_portNumber(const std::string& val) {
    portNumber = val;
  }

  void __set_data(const std::vector<int8_t> & val) {
    data = val;
  }

  bool operator == (const DeviceControlService_writeData_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(portNumber == rhs.portNumber))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_writeData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_writeData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_writeData_pargs {
 public:


  virtual ~DeviceControlService_writeData_pargs() throw() {}

  const std::string* deviceId;
  const std::string* portNumber;
  const std::vector<int8_t> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_writeData_result__isset {
  _DeviceControlService_writeData_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_writeData_result__isset;

class DeviceControlService_writeData_result {
 public:

  DeviceControlService_writeData_result() : success("") {
  }

  virtual ~DeviceControlService_writeData_result() throw() {}

  std::string success;

  _DeviceControlService_writeData_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceControlService_writeData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_writeData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_writeData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_writeData_presult__isset {
  _DeviceControlService_writeData_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_writeData_presult__isset;

class DeviceControlService_writeData_presult {
 public:


  virtual ~DeviceControlService_writeData_presult() throw() {}

  std::string* success;

  _DeviceControlService_writeData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceControlService_readData_args__isset {
  _DeviceControlService_readData_args__isset() : deviceId(false), portNumber(false) {}
  bool deviceId;
  bool portNumber;
} _DeviceControlService_readData_args__isset;

class DeviceControlService_readData_args {
 public:

  DeviceControlService_readData_args() : deviceId(""), portNumber("") {
  }

  virtual ~DeviceControlService_readData_args() throw() {}

  std::string deviceId;
  std::string portNumber;

  _DeviceControlService_readData_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_portNumber(const std::string& val) {
    portNumber = val;
  }

  bool operator == (const DeviceControlService_readData_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(portNumber == rhs.portNumber))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_readData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_readData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceControlService_readData_pargs {
 public:


  virtual ~DeviceControlService_readData_pargs() throw() {}

  const std::string* deviceId;
  const std::string* portNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_readData_result__isset {
  _DeviceControlService_readData_result__isset() : success(false) {}
  bool success;
} _DeviceControlService_readData_result__isset;

class DeviceControlService_readData_result {
 public:

  DeviceControlService_readData_result() {
  }

  virtual ~DeviceControlService_readData_result() throw() {}

  std::vector<int8_t>  success;

  _DeviceControlService_readData_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val) {
    success = val;
  }

  bool operator == (const DeviceControlService_readData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceControlService_readData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceControlService_readData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceControlService_readData_presult__isset {
  _DeviceControlService_readData_presult__isset() : success(false) {}
  bool success;
} _DeviceControlService_readData_presult__isset;

class DeviceControlService_readData_presult {
 public:


  virtual ~DeviceControlService_readData_presult() throw() {}

  std::vector<int8_t> * success;

  _DeviceControlService_readData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DeviceControlServiceClient : virtual public DeviceControlServiceIf {
 public:
  DeviceControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DeviceControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDeviceStatus(std::string& _return, const std::string& deviceId);
  void send_getDeviceStatus(const std::string& deviceId);
  void recv_getDeviceStatus(std::string& _return);
  void getGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber);
  void send_getGPIO(const std::string& deviceId, const std::string& ioNumber);
  void recv_getGPIO(std::string& _return);
  void setGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber, const std::string& value);
  void send_setGPIO(const std::string& deviceId, const std::string& ioNumber, const std::string& value);
  void recv_setGPIO(std::string& _return);
  void startPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void send_startPanDevice(const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void recv_startPanDevice(std::string& _return);
  void stopPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId);
  void send_stopPanDevice(const std::string& deviceId, const std::string& channelId);
  void recv_stopPanDevice(std::string& _return);
  void startTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void send_startTiltDevice(const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void recv_startTiltDevice(std::string& _return);
  void stopTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId);
  void send_stopTiltDevice(const std::string& deviceId, const std::string& channelId);
  void recv_stopTiltDevice(std::string& _return);
  void startZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void send_startZoomDevice(const std::string& deviceId, const std::string& channelId, const std::string& direction);
  void recv_startZoomDevice(std::string& _return);
  void stopZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId);
  void send_stopZoomDevice(const std::string& deviceId, const std::string& channelId);
  void recv_stopZoomDevice(std::string& _return);
  void writeData(std::string& _return, const std::string& deviceId, const std::string& portNumber, const std::vector<int8_t> & data);
  void send_writeData(const std::string& deviceId, const std::string& portNumber, const std::vector<int8_t> & data);
  void recv_writeData(std::string& _return);
  void readData(std::vector<int8_t> & _return, const std::string& deviceId, const std::string& portNumber);
  void send_readData(const std::string& deviceId, const std::string& portNumber);
  void recv_readData(std::vector<int8_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DeviceControlServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DeviceControlServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (DeviceControlServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getDeviceStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGPIO(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setGPIO(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPanDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopPanDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startTiltDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopTiltDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startZoomDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopZoomDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DeviceControlServiceProcessor(boost::shared_ptr<DeviceControlServiceIf> iface) :
    iface_(iface) {
    processMap_["getDeviceStatus"] = &DeviceControlServiceProcessor::process_getDeviceStatus;
    processMap_["getGPIO"] = &DeviceControlServiceProcessor::process_getGPIO;
    processMap_["setGPIO"] = &DeviceControlServiceProcessor::process_setGPIO;
    processMap_["startPanDevice"] = &DeviceControlServiceProcessor::process_startPanDevice;
    processMap_["stopPanDevice"] = &DeviceControlServiceProcessor::process_stopPanDevice;
    processMap_["startTiltDevice"] = &DeviceControlServiceProcessor::process_startTiltDevice;
    processMap_["stopTiltDevice"] = &DeviceControlServiceProcessor::process_stopTiltDevice;
    processMap_["startZoomDevice"] = &DeviceControlServiceProcessor::process_startZoomDevice;
    processMap_["stopZoomDevice"] = &DeviceControlServiceProcessor::process_stopZoomDevice;
    processMap_["writeData"] = &DeviceControlServiceProcessor::process_writeData;
    processMap_["readData"] = &DeviceControlServiceProcessor::process_readData;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~DeviceControlServiceProcessor() {}
};

class DeviceControlServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DeviceControlServiceProcessorFactory(const ::boost::shared_ptr< DeviceControlServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DeviceControlServiceIfFactory > handlerFactory_;
};

class DeviceControlServiceMultiface : virtual public DeviceControlServiceIf {
 public:
  DeviceControlServiceMultiface(std::vector<boost::shared_ptr<DeviceControlServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DeviceControlServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DeviceControlServiceIf> > ifaces_;
  DeviceControlServiceMultiface() {}
  void add(boost::shared_ptr<DeviceControlServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDeviceStatus(std::string& _return, const std::string& deviceId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getDeviceStatus(_return, deviceId);
        return;
      } else {
        ifaces_[i]->getDeviceStatus(_return, deviceId);
      }
    }
  }

  void getGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGPIO(_return, deviceId, ioNumber);
        return;
      } else {
        ifaces_[i]->getGPIO(_return, deviceId, ioNumber);
      }
    }
  }

  void setGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->setGPIO(_return, deviceId, ioNumber, value);
        return;
      } else {
        ifaces_[i]->setGPIO(_return, deviceId, ioNumber, value);
      }
    }
  }

  void startPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->startPanDevice(_return, deviceId, channelId, direction);
        return;
      } else {
        ifaces_[i]->startPanDevice(_return, deviceId, channelId, direction);
      }
    }
  }

  void stopPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->stopPanDevice(_return, deviceId, channelId);
        return;
      } else {
        ifaces_[i]->stopPanDevice(_return, deviceId, channelId);
      }
    }
  }

  void startTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->startTiltDevice(_return, deviceId, channelId, direction);
        return;
      } else {
        ifaces_[i]->startTiltDevice(_return, deviceId, channelId, direction);
      }
    }
  }

  void stopTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->stopTiltDevice(_return, deviceId, channelId);
        return;
      } else {
        ifaces_[i]->stopTiltDevice(_return, deviceId, channelId);
      }
    }
  }

  void startZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->startZoomDevice(_return, deviceId, channelId, direction);
        return;
      } else {
        ifaces_[i]->startZoomDevice(_return, deviceId, channelId, direction);
      }
    }
  }

  void stopZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->stopZoomDevice(_return, deviceId, channelId);
        return;
      } else {
        ifaces_[i]->stopZoomDevice(_return, deviceId, channelId);
      }
    }
  }

  void writeData(std::string& _return, const std::string& deviceId, const std::string& portNumber, const std::vector<int8_t> & data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->writeData(_return, deviceId, portNumber, data);
        return;
      } else {
        ifaces_[i]->writeData(_return, deviceId, portNumber, data);
      }
    }
  }

  void readData(std::vector<int8_t> & _return, const std::string& deviceId, const std::string& portNumber) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->readData(_return, deviceId, portNumber);
        return;
      } else {
        ifaces_[i]->readData(_return, deviceId, portNumber);
      }
    }
  }

};

}}}} // namespace

#endif
