// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DeviceControlService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::kaisquare::core::thrift;

class DeviceControlServiceHandler : virtual public DeviceControlServiceIf {
 public:
  DeviceControlServiceHandler() {
    // Your initialization goes here
  }

  void getDeviceStatus(std::string& _return, const std::string& deviceId) {
    // Your implementation goes here
    printf("getDeviceStatus\n");
  }

  void getGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber) {
    // Your implementation goes here
    printf("getGPIO\n");
  }

  void setGPIO(std::string& _return, const std::string& deviceId, const std::string& ioNumber, const std::string& value) {
    // Your implementation goes here
    printf("setGPIO\n");
  }

  void startPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    // Your implementation goes here
    printf("startPanDevice\n");
  }

  void stopPanDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    // Your implementation goes here
    printf("stopPanDevice\n");
  }

  void startTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    // Your implementation goes here
    printf("startTiltDevice\n");
  }

  void stopTiltDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    // Your implementation goes here
    printf("stopTiltDevice\n");
  }

  void startZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId, const std::string& direction) {
    // Your implementation goes here
    printf("startZoomDevice\n");
  }

  void stopZoomDevice(std::string& _return, const std::string& deviceId, const std::string& channelId) {
    // Your implementation goes here
    printf("stopZoomDevice\n");
  }

  void writeData(std::string& _return, const std::string& deviceId, const std::string& portNumber, const std::vector<int8_t> & data) {
    // Your implementation goes here
    printf("writeData\n");
  }

  void readData(std::vector<int8_t> & _return, const std::string& deviceId, const std::string& portNumber) {
    // Your implementation goes here
    printf("readData\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DeviceControlServiceHandler> handler(new DeviceControlServiceHandler());
  shared_ptr<TProcessor> processor(new DeviceControlServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

