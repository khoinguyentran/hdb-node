/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EventStructures_TYPES_H
#define EventStructures_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace com { namespace kaisquare { namespace events { namespace thrift {

typedef struct _EventDetails__isset {
  _EventDetails__isset() : id(false), data(false), type(false), time(false), deviceId(false), channelId(false), binaryData(false) {}
  bool id;
  bool data;
  bool type;
  bool time;
  bool deviceId;
  bool channelId;
  bool binaryData;
} _EventDetails__isset;

class EventDetails {
 public:

  static const char* ascii_fingerprint; // = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

  EventDetails() : id(""), data(""), type(""), time(""), deviceId(""), channelId(""), binaryData("") {
  }

  virtual ~EventDetails() throw() {}

  std::string id;
  std::string data;
  std::string type;
  std::string time;
  std::string deviceId;
  std::string channelId;
  std::string binaryData;

  _EventDetails__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_time(const std::string& val) {
    time = val;
  }

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_binaryData(const std::string& val) {
    binaryData = val;
  }

  bool operator == (const EventDetails & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(binaryData == rhs.binaryData))
      return false;
    return true;
  }
  bool operator != (const EventDetails &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventDetails & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}}} // namespace

#endif
