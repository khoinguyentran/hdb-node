/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceManagementService_H
#define DeviceManagementService_H

#include <TProcessor.h>
#include "CoreServices_types.h"

namespace com { namespace kaisquare { namespace core { namespace thrift {

class DeviceManagementServiceIf {
 public:
  virtual ~DeviceManagementServiceIf() {}
  virtual void addModel(std::string& _return, const DeviceModel& model) = 0;
  virtual bool updateModel(const DeviceModel& model) = 0;
  virtual bool deleteModel(const std::string& modelId) = 0;
  virtual void listModels(std::vector<DeviceModel> & _return) = 0;
  virtual void addDevice(std::string& _return, const DeviceDetails& device) = 0;
  virtual bool updateDevice(const DeviceDetails& device) = 0;
  virtual bool deleteDevice(const std::string& deviceId) = 0;
  virtual void listDevices(std::vector<DeviceDetails> & _return, const std::string& filter) = 0;
  virtual void getDevice(DeviceDetails& _return, const std::string& deviceId) = 0;
  virtual bool activateDevice(const DeviceDetails& device) = 0;
};

class DeviceManagementServiceIfFactory {
 public:
  typedef DeviceManagementServiceIf Handler;

  virtual ~DeviceManagementServiceIfFactory() {}

  virtual DeviceManagementServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceManagementServiceIf* /* handler */) = 0;
};

class DeviceManagementServiceIfSingletonFactory : virtual public DeviceManagementServiceIfFactory {
 public:
  DeviceManagementServiceIfSingletonFactory(const boost::shared_ptr<DeviceManagementServiceIf>& iface) : iface_(iface) {}
  virtual ~DeviceManagementServiceIfSingletonFactory() {}

  virtual DeviceManagementServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceManagementServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DeviceManagementServiceIf> iface_;
};

class DeviceManagementServiceNull : virtual public DeviceManagementServiceIf {
 public:
  virtual ~DeviceManagementServiceNull() {}
  void addModel(std::string& /* _return */, const DeviceModel& /* model */) {
    return;
  }
  bool updateModel(const DeviceModel& /* model */) {
    bool _return = false;
    return _return;
  }
  bool deleteModel(const std::string& /* modelId */) {
    bool _return = false;
    return _return;
  }
  void listModels(std::vector<DeviceModel> & /* _return */) {
    return;
  }
  void addDevice(std::string& /* _return */, const DeviceDetails& /* device */) {
    return;
  }
  bool updateDevice(const DeviceDetails& /* device */) {
    bool _return = false;
    return _return;
  }
  bool deleteDevice(const std::string& /* deviceId */) {
    bool _return = false;
    return _return;
  }
  void listDevices(std::vector<DeviceDetails> & /* _return */, const std::string& /* filter */) {
    return;
  }
  void getDevice(DeviceDetails& /* _return */, const std::string& /* deviceId */) {
    return;
  }
  bool activateDevice(const DeviceDetails& /* device */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _DeviceManagementService_addModel_args__isset {
  _DeviceManagementService_addModel_args__isset() : model(false) {}
  bool model;
} _DeviceManagementService_addModel_args__isset;

class DeviceManagementService_addModel_args {
 public:

  DeviceManagementService_addModel_args() {
  }

  virtual ~DeviceManagementService_addModel_args() throw() {}

  DeviceModel model;

  _DeviceManagementService_addModel_args__isset __isset;

  void __set_model(const DeviceModel& val) {
    model = val;
  }

  bool operator == (const DeviceManagementService_addModel_args & rhs) const
  {
    if (!(model == rhs.model))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_addModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_addModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_addModel_pargs {
 public:


  virtual ~DeviceManagementService_addModel_pargs() throw() {}

  const DeviceModel* model;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_addModel_result__isset {
  _DeviceManagementService_addModel_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_addModel_result__isset;

class DeviceManagementService_addModel_result {
 public:

  DeviceManagementService_addModel_result() : success("") {
  }

  virtual ~DeviceManagementService_addModel_result() throw() {}

  std::string success;

  _DeviceManagementService_addModel_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_addModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_addModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_addModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_addModel_presult__isset {
  _DeviceManagementService_addModel_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_addModel_presult__isset;

class DeviceManagementService_addModel_presult {
 public:


  virtual ~DeviceManagementService_addModel_presult() throw() {}

  std::string* success;

  _DeviceManagementService_addModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_updateModel_args__isset {
  _DeviceManagementService_updateModel_args__isset() : model(false) {}
  bool model;
} _DeviceManagementService_updateModel_args__isset;

class DeviceManagementService_updateModel_args {
 public:

  DeviceManagementService_updateModel_args() {
  }

  virtual ~DeviceManagementService_updateModel_args() throw() {}

  DeviceModel model;

  _DeviceManagementService_updateModel_args__isset __isset;

  void __set_model(const DeviceModel& val) {
    model = val;
  }

  bool operator == (const DeviceManagementService_updateModel_args & rhs) const
  {
    if (!(model == rhs.model))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_updateModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_updateModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_updateModel_pargs {
 public:


  virtual ~DeviceManagementService_updateModel_pargs() throw() {}

  const DeviceModel* model;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_updateModel_result__isset {
  _DeviceManagementService_updateModel_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_updateModel_result__isset;

class DeviceManagementService_updateModel_result {
 public:

  DeviceManagementService_updateModel_result() : success(0) {
  }

  virtual ~DeviceManagementService_updateModel_result() throw() {}

  bool success;

  _DeviceManagementService_updateModel_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_updateModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_updateModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_updateModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_updateModel_presult__isset {
  _DeviceManagementService_updateModel_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_updateModel_presult__isset;

class DeviceManagementService_updateModel_presult {
 public:


  virtual ~DeviceManagementService_updateModel_presult() throw() {}

  bool* success;

  _DeviceManagementService_updateModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_deleteModel_args__isset {
  _DeviceManagementService_deleteModel_args__isset() : modelId(false) {}
  bool modelId;
} _DeviceManagementService_deleteModel_args__isset;

class DeviceManagementService_deleteModel_args {
 public:

  DeviceManagementService_deleteModel_args() : modelId("") {
  }

  virtual ~DeviceManagementService_deleteModel_args() throw() {}

  std::string modelId;

  _DeviceManagementService_deleteModel_args__isset __isset;

  void __set_modelId(const std::string& val) {
    modelId = val;
  }

  bool operator == (const DeviceManagementService_deleteModel_args & rhs) const
  {
    if (!(modelId == rhs.modelId))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_deleteModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_deleteModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_deleteModel_pargs {
 public:


  virtual ~DeviceManagementService_deleteModel_pargs() throw() {}

  const std::string* modelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_deleteModel_result__isset {
  _DeviceManagementService_deleteModel_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_deleteModel_result__isset;

class DeviceManagementService_deleteModel_result {
 public:

  DeviceManagementService_deleteModel_result() : success(0) {
  }

  virtual ~DeviceManagementService_deleteModel_result() throw() {}

  bool success;

  _DeviceManagementService_deleteModel_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_deleteModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_deleteModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_deleteModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_deleteModel_presult__isset {
  _DeviceManagementService_deleteModel_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_deleteModel_presult__isset;

class DeviceManagementService_deleteModel_presult {
 public:


  virtual ~DeviceManagementService_deleteModel_presult() throw() {}

  bool* success;

  _DeviceManagementService_deleteModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DeviceManagementService_listModels_args {
 public:

  DeviceManagementService_listModels_args() {
  }

  virtual ~DeviceManagementService_listModels_args() throw() {}


  bool operator == (const DeviceManagementService_listModels_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceManagementService_listModels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_listModels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_listModels_pargs {
 public:


  virtual ~DeviceManagementService_listModels_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_listModels_result__isset {
  _DeviceManagementService_listModels_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_listModels_result__isset;

class DeviceManagementService_listModels_result {
 public:

  DeviceManagementService_listModels_result() {
  }

  virtual ~DeviceManagementService_listModels_result() throw() {}

  std::vector<DeviceModel>  success;

  _DeviceManagementService_listModels_result__isset __isset;

  void __set_success(const std::vector<DeviceModel> & val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_listModels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_listModels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_listModels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_listModels_presult__isset {
  _DeviceManagementService_listModels_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_listModels_presult__isset;

class DeviceManagementService_listModels_presult {
 public:


  virtual ~DeviceManagementService_listModels_presult() throw() {}

  std::vector<DeviceModel> * success;

  _DeviceManagementService_listModels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_addDevice_args__isset {
  _DeviceManagementService_addDevice_args__isset() : device(false) {}
  bool device;
} _DeviceManagementService_addDevice_args__isset;

class DeviceManagementService_addDevice_args {
 public:

  DeviceManagementService_addDevice_args() {
  }

  virtual ~DeviceManagementService_addDevice_args() throw() {}

  DeviceDetails device;

  _DeviceManagementService_addDevice_args__isset __isset;

  void __set_device(const DeviceDetails& val) {
    device = val;
  }

  bool operator == (const DeviceManagementService_addDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_addDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_addDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_addDevice_pargs {
 public:


  virtual ~DeviceManagementService_addDevice_pargs() throw() {}

  const DeviceDetails* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_addDevice_result__isset {
  _DeviceManagementService_addDevice_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_addDevice_result__isset;

class DeviceManagementService_addDevice_result {
 public:

  DeviceManagementService_addDevice_result() : success("") {
  }

  virtual ~DeviceManagementService_addDevice_result() throw() {}

  std::string success;

  _DeviceManagementService_addDevice_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_addDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_addDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_addDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_addDevice_presult__isset {
  _DeviceManagementService_addDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_addDevice_presult__isset;

class DeviceManagementService_addDevice_presult {
 public:


  virtual ~DeviceManagementService_addDevice_presult() throw() {}

  std::string* success;

  _DeviceManagementService_addDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_updateDevice_args__isset {
  _DeviceManagementService_updateDevice_args__isset() : device(false) {}
  bool device;
} _DeviceManagementService_updateDevice_args__isset;

class DeviceManagementService_updateDevice_args {
 public:

  DeviceManagementService_updateDevice_args() {
  }

  virtual ~DeviceManagementService_updateDevice_args() throw() {}

  DeviceDetails device;

  _DeviceManagementService_updateDevice_args__isset __isset;

  void __set_device(const DeviceDetails& val) {
    device = val;
  }

  bool operator == (const DeviceManagementService_updateDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_updateDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_updateDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_updateDevice_pargs {
 public:


  virtual ~DeviceManagementService_updateDevice_pargs() throw() {}

  const DeviceDetails* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_updateDevice_result__isset {
  _DeviceManagementService_updateDevice_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_updateDevice_result__isset;

class DeviceManagementService_updateDevice_result {
 public:

  DeviceManagementService_updateDevice_result() : success(0) {
  }

  virtual ~DeviceManagementService_updateDevice_result() throw() {}

  bool success;

  _DeviceManagementService_updateDevice_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_updateDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_updateDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_updateDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_updateDevice_presult__isset {
  _DeviceManagementService_updateDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_updateDevice_presult__isset;

class DeviceManagementService_updateDevice_presult {
 public:


  virtual ~DeviceManagementService_updateDevice_presult() throw() {}

  bool* success;

  _DeviceManagementService_updateDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_deleteDevice_args__isset {
  _DeviceManagementService_deleteDevice_args__isset() : deviceId(false) {}
  bool deviceId;
} _DeviceManagementService_deleteDevice_args__isset;

class DeviceManagementService_deleteDevice_args {
 public:

  DeviceManagementService_deleteDevice_args() : deviceId("") {
  }

  virtual ~DeviceManagementService_deleteDevice_args() throw() {}

  std::string deviceId;

  _DeviceManagementService_deleteDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  bool operator == (const DeviceManagementService_deleteDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_deleteDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_deleteDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_deleteDevice_pargs {
 public:


  virtual ~DeviceManagementService_deleteDevice_pargs() throw() {}

  const std::string* deviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_deleteDevice_result__isset {
  _DeviceManagementService_deleteDevice_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_deleteDevice_result__isset;

class DeviceManagementService_deleteDevice_result {
 public:

  DeviceManagementService_deleteDevice_result() : success(0) {
  }

  virtual ~DeviceManagementService_deleteDevice_result() throw() {}

  bool success;

  _DeviceManagementService_deleteDevice_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_deleteDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_deleteDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_deleteDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_deleteDevice_presult__isset {
  _DeviceManagementService_deleteDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_deleteDevice_presult__isset;

class DeviceManagementService_deleteDevice_presult {
 public:


  virtual ~DeviceManagementService_deleteDevice_presult() throw() {}

  bool* success;

  _DeviceManagementService_deleteDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_listDevices_args__isset {
  _DeviceManagementService_listDevices_args__isset() : filter(false) {}
  bool filter;
} _DeviceManagementService_listDevices_args__isset;

class DeviceManagementService_listDevices_args {
 public:

  DeviceManagementService_listDevices_args() : filter("") {
  }

  virtual ~DeviceManagementService_listDevices_args() throw() {}

  std::string filter;

  _DeviceManagementService_listDevices_args__isset __isset;

  void __set_filter(const std::string& val) {
    filter = val;
  }

  bool operator == (const DeviceManagementService_listDevices_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_listDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_listDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_listDevices_pargs {
 public:


  virtual ~DeviceManagementService_listDevices_pargs() throw() {}

  const std::string* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_listDevices_result__isset {
  _DeviceManagementService_listDevices_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_listDevices_result__isset;

class DeviceManagementService_listDevices_result {
 public:

  DeviceManagementService_listDevices_result() {
  }

  virtual ~DeviceManagementService_listDevices_result() throw() {}

  std::vector<DeviceDetails>  success;

  _DeviceManagementService_listDevices_result__isset __isset;

  void __set_success(const std::vector<DeviceDetails> & val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_listDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_listDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_listDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_listDevices_presult__isset {
  _DeviceManagementService_listDevices_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_listDevices_presult__isset;

class DeviceManagementService_listDevices_presult {
 public:


  virtual ~DeviceManagementService_listDevices_presult() throw() {}

  std::vector<DeviceDetails> * success;

  _DeviceManagementService_listDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_getDevice_args__isset {
  _DeviceManagementService_getDevice_args__isset() : deviceId(false) {}
  bool deviceId;
} _DeviceManagementService_getDevice_args__isset;

class DeviceManagementService_getDevice_args {
 public:

  DeviceManagementService_getDevice_args() : deviceId("") {
  }

  virtual ~DeviceManagementService_getDevice_args() throw() {}

  std::string deviceId;

  _DeviceManagementService_getDevice_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  bool operator == (const DeviceManagementService_getDevice_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_getDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_getDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_getDevice_pargs {
 public:


  virtual ~DeviceManagementService_getDevice_pargs() throw() {}

  const std::string* deviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_getDevice_result__isset {
  _DeviceManagementService_getDevice_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_getDevice_result__isset;

class DeviceManagementService_getDevice_result {
 public:

  DeviceManagementService_getDevice_result() {
  }

  virtual ~DeviceManagementService_getDevice_result() throw() {}

  DeviceDetails success;

  _DeviceManagementService_getDevice_result__isset __isset;

  void __set_success(const DeviceDetails& val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_getDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_getDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_getDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_getDevice_presult__isset {
  _DeviceManagementService_getDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_getDevice_presult__isset;

class DeviceManagementService_getDevice_presult {
 public:


  virtual ~DeviceManagementService_getDevice_presult() throw() {}

  DeviceDetails* success;

  _DeviceManagementService_getDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceManagementService_activateDevice_args__isset {
  _DeviceManagementService_activateDevice_args__isset() : device(false) {}
  bool device;
} _DeviceManagementService_activateDevice_args__isset;

class DeviceManagementService_activateDevice_args {
 public:

  DeviceManagementService_activateDevice_args() {
  }

  virtual ~DeviceManagementService_activateDevice_args() throw() {}

  DeviceDetails device;

  _DeviceManagementService_activateDevice_args__isset __isset;

  void __set_device(const DeviceDetails& val) {
    device = val;
  }

  bool operator == (const DeviceManagementService_activateDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_activateDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_activateDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceManagementService_activateDevice_pargs {
 public:


  virtual ~DeviceManagementService_activateDevice_pargs() throw() {}

  const DeviceDetails* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_activateDevice_result__isset {
  _DeviceManagementService_activateDevice_result__isset() : success(false) {}
  bool success;
} _DeviceManagementService_activateDevice_result__isset;

class DeviceManagementService_activateDevice_result {
 public:

  DeviceManagementService_activateDevice_result() : success(0) {
  }

  virtual ~DeviceManagementService_activateDevice_result() throw() {}

  bool success;

  _DeviceManagementService_activateDevice_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceManagementService_activateDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceManagementService_activateDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceManagementService_activateDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceManagementService_activateDevice_presult__isset {
  _DeviceManagementService_activateDevice_presult__isset() : success(false) {}
  bool success;
} _DeviceManagementService_activateDevice_presult__isset;

class DeviceManagementService_activateDevice_presult {
 public:


  virtual ~DeviceManagementService_activateDevice_presult() throw() {}

  bool* success;

  _DeviceManagementService_activateDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DeviceManagementServiceClient : virtual public DeviceManagementServiceIf {
 public:
  DeviceManagementServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DeviceManagementServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void addModel(std::string& _return, const DeviceModel& model);
  void send_addModel(const DeviceModel& model);
  void recv_addModel(std::string& _return);
  bool updateModel(const DeviceModel& model);
  void send_updateModel(const DeviceModel& model);
  bool recv_updateModel();
  bool deleteModel(const std::string& modelId);
  void send_deleteModel(const std::string& modelId);
  bool recv_deleteModel();
  void listModels(std::vector<DeviceModel> & _return);
  void send_listModels();
  void recv_listModels(std::vector<DeviceModel> & _return);
  void addDevice(std::string& _return, const DeviceDetails& device);
  void send_addDevice(const DeviceDetails& device);
  void recv_addDevice(std::string& _return);
  bool updateDevice(const DeviceDetails& device);
  void send_updateDevice(const DeviceDetails& device);
  bool recv_updateDevice();
  bool deleteDevice(const std::string& deviceId);
  void send_deleteDevice(const std::string& deviceId);
  bool recv_deleteDevice();
  void listDevices(std::vector<DeviceDetails> & _return, const std::string& filter);
  void send_listDevices(const std::string& filter);
  void recv_listDevices(std::vector<DeviceDetails> & _return);
  void getDevice(DeviceDetails& _return, const std::string& deviceId);
  void send_getDevice(const std::string& deviceId);
  void recv_getDevice(DeviceDetails& _return);
  bool activateDevice(const DeviceDetails& device);
  void send_activateDevice(const DeviceDetails& device);
  bool recv_activateDevice();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DeviceManagementServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DeviceManagementServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (DeviceManagementServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_addModel(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateModel(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteModel(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listModels(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listDevices(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_activateDevice(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DeviceManagementServiceProcessor(boost::shared_ptr<DeviceManagementServiceIf> iface) :
    iface_(iface) {
    processMap_["addModel"] = &DeviceManagementServiceProcessor::process_addModel;
    processMap_["updateModel"] = &DeviceManagementServiceProcessor::process_updateModel;
    processMap_["deleteModel"] = &DeviceManagementServiceProcessor::process_deleteModel;
    processMap_["listModels"] = &DeviceManagementServiceProcessor::process_listModels;
    processMap_["addDevice"] = &DeviceManagementServiceProcessor::process_addDevice;
    processMap_["updateDevice"] = &DeviceManagementServiceProcessor::process_updateDevice;
    processMap_["deleteDevice"] = &DeviceManagementServiceProcessor::process_deleteDevice;
    processMap_["listDevices"] = &DeviceManagementServiceProcessor::process_listDevices;
    processMap_["getDevice"] = &DeviceManagementServiceProcessor::process_getDevice;
    processMap_["activateDevice"] = &DeviceManagementServiceProcessor::process_activateDevice;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~DeviceManagementServiceProcessor() {}
};

class DeviceManagementServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DeviceManagementServiceProcessorFactory(const ::boost::shared_ptr< DeviceManagementServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DeviceManagementServiceIfFactory > handlerFactory_;
};

class DeviceManagementServiceMultiface : virtual public DeviceManagementServiceIf {
 public:
  DeviceManagementServiceMultiface(std::vector<boost::shared_ptr<DeviceManagementServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DeviceManagementServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DeviceManagementServiceIf> > ifaces_;
  DeviceManagementServiceMultiface() {}
  void add(boost::shared_ptr<DeviceManagementServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void addModel(std::string& _return, const DeviceModel& model) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->addModel(_return, model);
        return;
      } else {
        ifaces_[i]->addModel(_return, model);
      }
    }
  }

  bool updateModel(const DeviceModel& model) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->updateModel(model);
      } else {
        ifaces_[i]->updateModel(model);
      }
    }
  }

  bool deleteModel(const std::string& modelId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->deleteModel(modelId);
      } else {
        ifaces_[i]->deleteModel(modelId);
      }
    }
  }

  void listModels(std::vector<DeviceModel> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->listModels(_return);
        return;
      } else {
        ifaces_[i]->listModels(_return);
      }
    }
  }

  void addDevice(std::string& _return, const DeviceDetails& device) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->addDevice(_return, device);
        return;
      } else {
        ifaces_[i]->addDevice(_return, device);
      }
    }
  }

  bool updateDevice(const DeviceDetails& device) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->updateDevice(device);
      } else {
        ifaces_[i]->updateDevice(device);
      }
    }
  }

  bool deleteDevice(const std::string& deviceId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->deleteDevice(deviceId);
      } else {
        ifaces_[i]->deleteDevice(deviceId);
      }
    }
  }

  void listDevices(std::vector<DeviceDetails> & _return, const std::string& filter) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->listDevices(_return, filter);
        return;
      } else {
        ifaces_[i]->listDevices(_return, filter);
      }
    }
  }

  void getDevice(DeviceDetails& _return, const std::string& deviceId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getDevice(_return, deviceId);
        return;
      } else {
        ifaces_[i]->getDevice(_return, deviceId);
      }
    }
  }

  bool activateDevice(const DeviceDetails& device) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->activateDevice(device);
      } else {
        ifaces_[i]->activateDevice(device);
      }
    }
  }

};

}}}} // namespace

#endif
