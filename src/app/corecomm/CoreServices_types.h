/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CoreServices_TYPES_H
#define CoreServices_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "EventStructures_types.h"


namespace com { namespace kaisquare { namespace core { namespace thrift {

typedef struct _LocationDataPoint__isset {
  _LocationDataPoint__isset() : time(false), latitude(false), longitude(false), direction(false), speed(false) {}
  bool time;
  bool latitude;
  bool longitude;
  bool direction;
  bool speed;
} _LocationDataPoint__isset;

class LocationDataPoint {
 public:

  static const char* ascii_fingerprint; // = "EC36BCFBA3BCCA5C09F3E61129C144FC";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x36,0xBC,0xFB,0xA3,0xBC,0xCA,0x5C,0x09,0xF3,0xE6,0x11,0x29,0xC1,0x44,0xFC};

  LocationDataPoint() : time(""), latitude(0), longitude(0), direction(0), speed(0) {
  }

  virtual ~LocationDataPoint() throw() {}

  std::string time;
  double latitude;
  double longitude;
  int64_t direction;
  double speed;

  _LocationDataPoint__isset __isset;

  void __set_time(const std::string& val) {
    time = val;
  }

  void __set_latitude(const double val) {
    latitude = val;
  }

  void __set_longitude(const double val) {
    longitude = val;
  }

  void __set_direction(const int64_t val) {
    direction = val;
  }

  void __set_speed(const double val) {
    speed = val;
  }

  bool operator == (const LocationDataPoint & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(speed == rhs.speed))
      return false;
    return true;
  }
  bool operator != (const LocationDataPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocationDataPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GSensorDataPoint__isset {
  _GSensorDataPoint__isset() : time(false), x(false), y(false), z(false) {}
  bool time;
  bool x;
  bool y;
  bool z;
} _GSensorDataPoint__isset;

class GSensorDataPoint {
 public:

  static const char* ascii_fingerprint; // = "404E13C197753240A95904827D10660E";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x4E,0x13,0xC1,0x97,0x75,0x32,0x40,0xA9,0x59,0x04,0x82,0x7D,0x10,0x66,0x0E};

  GSensorDataPoint() : time(""), x(0), y(0), z(0) {
  }

  virtual ~GSensorDataPoint() throw() {}

  std::string time;
  double x;
  double y;
  double z;

  _GSensorDataPoint__isset __isset;

  void __set_time(const std::string& val) {
    time = val;
  }

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const GSensorDataPoint & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const GSensorDataPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GSensorDataPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceModel__isset {
  _DeviceModel__isset() : id(false), createdAt(false), createdBy(false), modifiedAt(false), modifiedBy(false), name(false), channels(false), data(false), action(false), misc(false), liveview(false) {}
  bool id;
  bool createdAt;
  bool createdBy;
  bool modifiedAt;
  bool modifiedBy;
  bool name;
  bool channels;
  bool data;
  bool action;
  bool misc;
  bool liveview;
} _DeviceModel__isset;

class DeviceModel {
 public:

  static const char* ascii_fingerprint; // = "7C659ED3D0F6071DB427E0D8A3A5A85F";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x65,0x9E,0xD3,0xD0,0xF6,0x07,0x1D,0xB4,0x27,0xE0,0xD8,0xA3,0xA5,0xA8,0x5F};

  DeviceModel() : id(""), createdAt(""), createdBy(""), modifiedAt(""), modifiedBy(""), name(""), channels(""), data(""), action(""), misc(""), liveview("") {
  }

  virtual ~DeviceModel() throw() {}

  std::string id;
  std::string createdAt;
  std::string createdBy;
  std::string modifiedAt;
  std::string modifiedBy;
  std::string name;
  std::string channels;
  std::string data;
  std::string action;
  std::string misc;
  std::string liveview;

  _DeviceModel__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_createdAt(const std::string& val) {
    createdAt = val;
  }

  void __set_createdBy(const std::string& val) {
    createdBy = val;
  }

  void __set_modifiedAt(const std::string& val) {
    modifiedAt = val;
  }

  void __set_modifiedBy(const std::string& val) {
    modifiedBy = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_channels(const std::string& val) {
    channels = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_action(const std::string& val) {
    action = val;
  }

  void __set_misc(const std::string& val) {
    misc = val;
  }

  void __set_liveview(const std::string& val) {
    liveview = val;
  }

  bool operator == (const DeviceModel & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(createdAt == rhs.createdAt))
      return false;
    if (!(createdBy == rhs.createdBy))
      return false;
    if (!(modifiedAt == rhs.modifiedAt))
      return false;
    if (!(modifiedBy == rhs.modifiedBy))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(channels == rhs.channels))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(misc == rhs.misc))
      return false;
    if (!(liveview == rhs.liveview))
      return false;
    return true;
  }
  bool operator != (const DeviceModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceDetails__isset {
  _DeviceDetails__isset() : id(false), name(false), key(false), host(false), port(false), login(false), password(false), address(false), lat(false), lng(false), accountId(false), modelId(false), statusId(false), functionalityId(false), alertFlag(false), alive(false), currentPositionId(false), action(false), eventSettings(false), deviceServerUrls(false), liveview(false), snapshotRecordingEnabled(false), snapshotRecordingInterval(false), cloudRecordingEnabled(false) {}
  bool id;
  bool name;
  bool key;
  bool host;
  bool port;
  bool login;
  bool password;
  bool address;
  bool lat;
  bool lng;
  bool accountId;
  bool modelId;
  bool statusId;
  bool functionalityId;
  bool alertFlag;
  bool alive;
  bool currentPositionId;
  bool action;
  bool eventSettings;
  bool deviceServerUrls;
  bool liveview;
  bool snapshotRecordingEnabled;
  bool snapshotRecordingInterval;
  bool cloudRecordingEnabled;
} _DeviceDetails__isset;

class DeviceDetails {
 public:

  static const char* ascii_fingerprint; // = "CDFA13AA521652C238A636CC8D3EAA4D";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0xFA,0x13,0xAA,0x52,0x16,0x52,0xC2,0x38,0xA6,0x36,0xCC,0x8D,0x3E,0xAA,0x4D};

  DeviceDetails() : id(""), name(""), key(""), host(""), port(""), login(""), password(""), address(""), lat(""), lng(""), accountId(""), modelId(""), statusId(""), functionalityId(""), alertFlag(""), alive(""), currentPositionId(""), action(""), eventSettings(""), deviceServerUrls(""), liveview(""), snapshotRecordingEnabled(""), snapshotRecordingInterval(""), cloudRecordingEnabled("") {
  }

  virtual ~DeviceDetails() throw() {}

  std::string id;
  std::string name;
  std::string key;
  std::string host;
  std::string port;
  std::string login;
  std::string password;
  std::string address;
  std::string lat;
  std::string lng;
  std::string accountId;
  std::string modelId;
  std::string statusId;
  std::string functionalityId;
  std::string alertFlag;
  std::string alive;
  std::string currentPositionId;
  std::string action;
  std::string eventSettings;
  std::string deviceServerUrls;
  std::string liveview;
  std::string snapshotRecordingEnabled;
  std::string snapshotRecordingInterval;
  std::string cloudRecordingEnabled;

  _DeviceDetails__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_host(const std::string& val) {
    host = val;
  }

  void __set_port(const std::string& val) {
    port = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_lat(const std::string& val) {
    lat = val;
  }

  void __set_lng(const std::string& val) {
    lng = val;
  }

  void __set_accountId(const std::string& val) {
    accountId = val;
  }

  void __set_modelId(const std::string& val) {
    modelId = val;
  }

  void __set_statusId(const std::string& val) {
    statusId = val;
  }

  void __set_functionalityId(const std::string& val) {
    functionalityId = val;
  }

  void __set_alertFlag(const std::string& val) {
    alertFlag = val;
  }

  void __set_alive(const std::string& val) {
    alive = val;
  }

  void __set_currentPositionId(const std::string& val) {
    currentPositionId = val;
  }

  void __set_action(const std::string& val) {
    action = val;
  }

  void __set_eventSettings(const std::string& val) {
    eventSettings = val;
  }

  void __set_deviceServerUrls(const std::string& val) {
    deviceServerUrls = val;
  }

  void __set_liveview(const std::string& val) {
    liveview = val;
  }

  void __set_snapshotRecordingEnabled(const std::string& val) {
    snapshotRecordingEnabled = val;
  }

  void __set_snapshotRecordingInterval(const std::string& val) {
    snapshotRecordingInterval = val;
  }

  void __set_cloudRecordingEnabled(const std::string& val) {
    cloudRecordingEnabled = val;
  }

  bool operator == (const DeviceDetails & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(lat == rhs.lat))
      return false;
    if (!(lng == rhs.lng))
      return false;
    if (!(accountId == rhs.accountId))
      return false;
    if (!(modelId == rhs.modelId))
      return false;
    if (!(statusId == rhs.statusId))
      return false;
    if (!(functionalityId == rhs.functionalityId))
      return false;
    if (!(alertFlag == rhs.alertFlag))
      return false;
    if (!(alive == rhs.alive))
      return false;
    if (!(currentPositionId == rhs.currentPositionId))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(eventSettings == rhs.eventSettings))
      return false;
    if (!(deviceServerUrls == rhs.deviceServerUrls))
      return false;
    if (!(liveview == rhs.liveview))
      return false;
    if (!(snapshotRecordingEnabled == rhs.snapshotRecordingEnabled))
      return false;
    if (!(snapshotRecordingInterval == rhs.snapshotRecordingInterval))
      return false;
    if (!(cloudRecordingEnabled == rhs.cloudRecordingEnabled))
      return false;
    return true;
  }
  bool operator != (const DeviceDetails &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceDetails & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TagInfo__isset {
  _TagInfo__isset() : tagId(false), macAddress(false) {}
  bool tagId;
  bool macAddress;
} _TagInfo__isset;

class TagInfo {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TagInfo() : tagId(""), macAddress("") {
  }

  virtual ~TagInfo() throw() {}

  std::string tagId;
  std::string macAddress;

  _TagInfo__isset __isset;

  void __set_tagId(const std::string& val) {
    tagId = val;
  }

  void __set_macAddress(const std::string& val) {
    macAddress = val;
  }

  bool operator == (const TagInfo & rhs) const
  {
    if (!(tagId == rhs.tagId))
      return false;
    if (!(macAddress == rhs.macAddress))
      return false;
    return true;
  }
  bool operator != (const TagInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IndoorLocationInfo__isset {
  _IndoorLocationInfo__isset() : mapId(false), x(false), y(false), timestamp(false) {}
  bool mapId;
  bool x;
  bool y;
  bool timestamp;
} _IndoorLocationInfo__isset;

class IndoorLocationInfo {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  IndoorLocationInfo() : mapId(""), x(""), y(""), timestamp("") {
  }

  virtual ~IndoorLocationInfo() throw() {}

  std::string mapId;
  std::string x;
  std::string y;
  std::string timestamp;

  _IndoorLocationInfo__isset __isset;

  void __set_mapId(const std::string& val) {
    mapId = val;
  }

  void __set_x(const std::string& val) {
    x = val;
  }

  void __set_y(const std::string& val) {
    y = val;
  }

  void __set_timestamp(const std::string& val) {
    timestamp = val;
  }

  bool operator == (const IndoorLocationInfo & rhs) const
  {
    if (!(mapId == rhs.mapId))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const IndoorLocationInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IndoorLocationInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IndoorMapInfo__isset {
  _IndoorMapInfo__isset() : mapId(false), mapBlob(false) {}
  bool mapId;
  bool mapBlob;
} _IndoorMapInfo__isset;

class IndoorMapInfo {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  IndoorMapInfo() : mapId(""), mapBlob("") {
  }

  virtual ~IndoorMapInfo() throw() {}

  std::string mapId;
  std::string mapBlob;

  _IndoorMapInfo__isset __isset;

  void __set_mapId(const std::string& val) {
    mapId = val;
  }

  void __set_mapBlob(const std::string& val) {
    mapBlob = val;
  }

  bool operator == (const IndoorMapInfo & rhs) const
  {
    if (!(mapId == rhs.mapId))
      return false;
    if (!(mapBlob == rhs.mapBlob))
      return false;
    return true;
  }
  bool operator != (const IndoorMapInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IndoorMapInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}}} // namespace

#endif
