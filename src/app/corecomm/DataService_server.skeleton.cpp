// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DataService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::kaisquare::core::thrift;

class DataServiceHandler : virtual public DataServiceIf {
 public:
  DataServiceHandler() {
    // Your initialization goes here
  }

  void getGPSData(std::vector<LocationDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) {
    // Your implementation goes here
    printf("getGPSData\n");
  }

  void getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp, const std::string& type) {
    // Your implementation goes here
    printf("getEvents\n");
  }

  void getGSensorData(std::vector<GSensorDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) {
    // Your implementation goes here
    printf("getGSensorData\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DataServiceHandler> handler(new DataServiceHandler());
  shared_ptr<TProcessor> processor(new DataServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

