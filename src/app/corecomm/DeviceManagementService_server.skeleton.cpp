// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DeviceManagementService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::kaisquare::core::thrift;

class DeviceManagementServiceHandler : virtual public DeviceManagementServiceIf {
 public:
  DeviceManagementServiceHandler() {
    // Your initialization goes here
  }

  void addModel(std::string& _return, const DeviceModel& model) {
    // Your implementation goes here
    printf("addModel\n");
  }

  bool updateModel(const DeviceModel& model) {
    // Your implementation goes here
    printf("updateModel\n");
  }

  bool deleteModel(const std::string& modelId) {
    // Your implementation goes here
    printf("deleteModel\n");
  }

  void listModels(std::vector<DeviceModel> & _return) {
    // Your implementation goes here
    printf("listModels\n");
  }

  void addDevice(std::string& _return, const DeviceDetails& device) {
    // Your implementation goes here
    printf("addDevice\n");
  }

  bool updateDevice(const DeviceDetails& device) {
    // Your implementation goes here
    printf("updateDevice\n");
  }

  bool deleteDevice(const std::string& deviceId) {
    // Your implementation goes here
    printf("deleteDevice\n");
  }

  void listDevices(std::vector<DeviceDetails> & _return, const std::string& filter) {
    // Your implementation goes here
    printf("listDevices\n");
  }

  void getDevice(DeviceDetails& _return, const std::string& deviceId) {
    // Your implementation goes here
    printf("getDevice\n");
  }

  bool activateDevice(const DeviceDetails& device) {
    // Your implementation goes here
    printf("activateDevice\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DeviceManagementServiceHandler> handler(new DeviceManagementServiceHandler());
  shared_ptr<TProcessor> processor(new DeviceManagementServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

