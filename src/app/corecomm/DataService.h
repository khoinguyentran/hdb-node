/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataService_H
#define DataService_H

#include <TProcessor.h>
#include "CoreServices_types.h"

namespace com { namespace kaisquare { namespace core { namespace thrift {

class DataServiceIf {
 public:
  virtual ~DataServiceIf() {}
  virtual void getGPSData(std::vector<LocationDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) = 0;
  virtual void getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp, const std::string& type) = 0;
  virtual void getGSensorData(std::vector<GSensorDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) = 0;
};

class DataServiceIfFactory {
 public:
  typedef DataServiceIf Handler;

  virtual ~DataServiceIfFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataServiceIf* /* handler */) = 0;
};

class DataServiceIfSingletonFactory : virtual public DataServiceIfFactory {
 public:
  DataServiceIfSingletonFactory(const boost::shared_ptr<DataServiceIf>& iface) : iface_(iface) {}
  virtual ~DataServiceIfSingletonFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataServiceIf> iface_;
};

class DataServiceNull : virtual public DataServiceIf {
 public:
  virtual ~DataServiceNull() {}
  void getGPSData(std::vector<LocationDataPoint> & /* _return */, const std::string& /* deviceId */, const std::string& /* startTimestamp */, const std::string& /* endTimestamp */) {
    return;
  }
  void getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & /* _return */, const std::string& /* deviceId */, const std::string& /* startTimestamp */, const std::string& /* endTimestamp */, const std::string& /* type */) {
    return;
  }
  void getGSensorData(std::vector<GSensorDataPoint> & /* _return */, const std::string& /* deviceId */, const std::string& /* startTimestamp */, const std::string& /* endTimestamp */) {
    return;
  }
};

typedef struct _DataService_getGPSData_args__isset {
  _DataService_getGPSData_args__isset() : deviceId(false), startTimestamp(false), endTimestamp(false) {}
  bool deviceId;
  bool startTimestamp;
  bool endTimestamp;
} _DataService_getGPSData_args__isset;

class DataService_getGPSData_args {
 public:

  DataService_getGPSData_args() : deviceId(""), startTimestamp(""), endTimestamp("") {
  }

  virtual ~DataService_getGPSData_args() throw() {}

  std::string deviceId;
  std::string startTimestamp;
  std::string endTimestamp;

  _DataService_getGPSData_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_startTimestamp(const std::string& val) {
    startTimestamp = val;
  }

  void __set_endTimestamp(const std::string& val) {
    endTimestamp = val;
  }

  bool operator == (const DataService_getGPSData_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(startTimestamp == rhs.startTimestamp))
      return false;
    if (!(endTimestamp == rhs.endTimestamp))
      return false;
    return true;
  }
  bool operator != (const DataService_getGPSData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getGPSData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_getGPSData_pargs {
 public:


  virtual ~DataService_getGPSData_pargs() throw() {}

  const std::string* deviceId;
  const std::string* startTimestamp;
  const std::string* endTimestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getGPSData_result__isset {
  _DataService_getGPSData_result__isset() : success(false) {}
  bool success;
} _DataService_getGPSData_result__isset;

class DataService_getGPSData_result {
 public:

  DataService_getGPSData_result() {
  }

  virtual ~DataService_getGPSData_result() throw() {}

  std::vector<LocationDataPoint>  success;

  _DataService_getGPSData_result__isset __isset;

  void __set_success(const std::vector<LocationDataPoint> & val) {
    success = val;
  }

  bool operator == (const DataService_getGPSData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_getGPSData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getGPSData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getGPSData_presult__isset {
  _DataService_getGPSData_presult__isset() : success(false) {}
  bool success;
} _DataService_getGPSData_presult__isset;

class DataService_getGPSData_presult {
 public:


  virtual ~DataService_getGPSData_presult() throw() {}

  std::vector<LocationDataPoint> * success;

  _DataService_getGPSData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_getEvents_args__isset {
  _DataService_getEvents_args__isset() : deviceId(false), startTimestamp(false), endTimestamp(false), type(false) {}
  bool deviceId;
  bool startTimestamp;
  bool endTimestamp;
  bool type;
} _DataService_getEvents_args__isset;

class DataService_getEvents_args {
 public:

  DataService_getEvents_args() : deviceId(""), startTimestamp(""), endTimestamp(""), type("") {
  }

  virtual ~DataService_getEvents_args() throw() {}

  std::string deviceId;
  std::string startTimestamp;
  std::string endTimestamp;
  std::string type;

  _DataService_getEvents_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_startTimestamp(const std::string& val) {
    startTimestamp = val;
  }

  void __set_endTimestamp(const std::string& val) {
    endTimestamp = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const DataService_getEvents_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(startTimestamp == rhs.startTimestamp))
      return false;
    if (!(endTimestamp == rhs.endTimestamp))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const DataService_getEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_getEvents_pargs {
 public:


  virtual ~DataService_getEvents_pargs() throw() {}

  const std::string* deviceId;
  const std::string* startTimestamp;
  const std::string* endTimestamp;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getEvents_result__isset {
  _DataService_getEvents_result__isset() : success(false) {}
  bool success;
} _DataService_getEvents_result__isset;

class DataService_getEvents_result {
 public:

  DataService_getEvents_result() {
  }

  virtual ~DataService_getEvents_result() throw() {}

  std::vector< ::com::kaisquare::events::thrift::EventDetails>  success;

  _DataService_getEvents_result__isset __isset;

  void __set_success(const std::vector< ::com::kaisquare::events::thrift::EventDetails> & val) {
    success = val;
  }

  bool operator == (const DataService_getEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_getEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getEvents_presult__isset {
  _DataService_getEvents_presult__isset() : success(false) {}
  bool success;
} _DataService_getEvents_presult__isset;

class DataService_getEvents_presult {
 public:


  virtual ~DataService_getEvents_presult() throw() {}

  std::vector< ::com::kaisquare::events::thrift::EventDetails> * success;

  _DataService_getEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_getGSensorData_args__isset {
  _DataService_getGSensorData_args__isset() : deviceId(false), startTimestamp(false), endTimestamp(false) {}
  bool deviceId;
  bool startTimestamp;
  bool endTimestamp;
} _DataService_getGSensorData_args__isset;

class DataService_getGSensorData_args {
 public:

  DataService_getGSensorData_args() : deviceId(""), startTimestamp(""), endTimestamp("") {
  }

  virtual ~DataService_getGSensorData_args() throw() {}

  std::string deviceId;
  std::string startTimestamp;
  std::string endTimestamp;

  _DataService_getGSensorData_args__isset __isset;

  void __set_deviceId(const std::string& val) {
    deviceId = val;
  }

  void __set_startTimestamp(const std::string& val) {
    startTimestamp = val;
  }

  void __set_endTimestamp(const std::string& val) {
    endTimestamp = val;
  }

  bool operator == (const DataService_getGSensorData_args & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(startTimestamp == rhs.startTimestamp))
      return false;
    if (!(endTimestamp == rhs.endTimestamp))
      return false;
    return true;
  }
  bool operator != (const DataService_getGSensorData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getGSensorData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_getGSensorData_pargs {
 public:


  virtual ~DataService_getGSensorData_pargs() throw() {}

  const std::string* deviceId;
  const std::string* startTimestamp;
  const std::string* endTimestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getGSensorData_result__isset {
  _DataService_getGSensorData_result__isset() : success(false) {}
  bool success;
} _DataService_getGSensorData_result__isset;

class DataService_getGSensorData_result {
 public:

  DataService_getGSensorData_result() {
  }

  virtual ~DataService_getGSensorData_result() throw() {}

  std::vector<GSensorDataPoint>  success;

  _DataService_getGSensorData_result__isset __isset;

  void __set_success(const std::vector<GSensorDataPoint> & val) {
    success = val;
  }

  bool operator == (const DataService_getGSensorData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_getGSensorData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_getGSensorData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_getGSensorData_presult__isset {
  _DataService_getGSensorData_presult__isset() : success(false) {}
  bool success;
} _DataService_getGSensorData_presult__isset;

class DataService_getGSensorData_presult {
 public:


  virtual ~DataService_getGSensorData_presult() throw() {}

  std::vector<GSensorDataPoint> * success;

  _DataService_getGSensorData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataServiceClient : virtual public DataServiceIf {
 public:
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getGPSData(std::vector<LocationDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp);
  void send_getGPSData(const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp);
  void recv_getGPSData(std::vector<LocationDataPoint> & _return);
  void getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp, const std::string& type);
  void send_getEvents(const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp, const std::string& type);
  void recv_getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & _return);
  void getGSensorData(std::vector<GSensorDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp);
  void send_getGSensorData(const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp);
  void recv_getGSensorData(std::vector<GSensorDataPoint> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DataServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (DataServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getGPSData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEvents(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGSensorData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataServiceProcessor(boost::shared_ptr<DataServiceIf> iface) :
    iface_(iface) {
    processMap_["getGPSData"] = &DataServiceProcessor::process_getGPSData;
    processMap_["getEvents"] = &DataServiceProcessor::process_getEvents;
    processMap_["getGSensorData"] = &DataServiceProcessor::process_getGSensorData;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~DataServiceProcessor() {}
};

class DataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataServiceProcessorFactory(const ::boost::shared_ptr< DataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataServiceIfFactory > handlerFactory_;
};

class DataServiceMultiface : virtual public DataServiceIf {
 public:
  DataServiceMultiface(std::vector<boost::shared_ptr<DataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataServiceIf> > ifaces_;
  DataServiceMultiface() {}
  void add(boost::shared_ptr<DataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getGPSData(std::vector<LocationDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGPSData(_return, deviceId, startTimestamp, endTimestamp);
        return;
      } else {
        ifaces_[i]->getGPSData(_return, deviceId, startTimestamp, endTimestamp);
      }
    }
  }

  void getEvents(std::vector< ::com::kaisquare::events::thrift::EventDetails> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp, const std::string& type) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getEvents(_return, deviceId, startTimestamp, endTimestamp, type);
        return;
      } else {
        ifaces_[i]->getEvents(_return, deviceId, startTimestamp, endTimestamp, type);
      }
    }
  }

  void getGSensorData(std::vector<GSensorDataPoint> & _return, const std::string& deviceId, const std::string& startTimestamp, const std::string& endTimestamp) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getGSensorData(_return, deviceId, startTimestamp, endTimestamp);
        return;
      } else {
        ifaces_[i]->getGSensorData(_return, deviceId, startTimestamp, endTimestamp);
      }
    }
  }

};

}}}} // namespace

#endif
