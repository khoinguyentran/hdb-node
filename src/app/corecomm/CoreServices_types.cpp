/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CoreServices_types.h"

namespace com { namespace kaisquare { namespace core { namespace thrift {

const char* LocationDataPoint::ascii_fingerprint = "EC36BCFBA3BCCA5C09F3E61129C144FC";
const uint8_t LocationDataPoint::binary_fingerprint[16] = {0xEC,0x36,0xBC,0xFB,0xA3,0xBC,0xCA,0x5C,0x09,0xF3,0xE6,0x11,0x29,0xC1,0x44,0xFC};

uint32_t LocationDataPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->direction);
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LocationDataPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LocationDataPoint");
  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("direction", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->direction);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->speed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* GSensorDataPoint::ascii_fingerprint = "404E13C197753240A95904827D10660E";
const uint8_t GSensorDataPoint::binary_fingerprint[16] = {0x40,0x4E,0x13,0xC1,0x97,0x75,0x32,0x40,0xA9,0x59,0x04,0x82,0x7D,0x10,0x66,0x0E};

uint32_t GSensorDataPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GSensorDataPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GSensorDataPoint");
  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DeviceModel::ascii_fingerprint = "7C659ED3D0F6071DB427E0D8A3A5A85F";
const uint8_t DeviceModel::binary_fingerprint[16] = {0x7C,0x65,0x9E,0xD3,0xD0,0xF6,0x07,0x1D,0xB4,0x27,0xE0,0xD8,0xA3,0xA5,0xA8,0x5F};

uint32_t DeviceModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdAt);
          this->__isset.createdAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdBy);
          this->__isset.createdBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifiedAt);
          this->__isset.modifiedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifiedBy);
          this->__isset.modifiedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channels);
          this->__isset.channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->action);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->misc);
          this->__isset.misc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->liveview);
          this->__isset.liveview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceModel");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("createdAt", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->createdAt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("createdBy", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->createdBy);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("modifiedAt", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->modifiedAt);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("modifiedBy", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->modifiedBy);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->channels);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->action);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("misc", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->misc);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("liveview", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->liveview);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DeviceDetails::ascii_fingerprint = "CDFA13AA521652C238A636CC8D3EAA4D";
const uint8_t DeviceDetails::binary_fingerprint[16] = {0xCD,0xFA,0x13,0xAA,0x52,0x16,0x52,0xC2,0x38,0xA6,0x36,0xCC,0x8D,0x3E,0xAA,0x4D};

uint32_t DeviceDetails::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lat);
          this->__isset.lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lng);
          this->__isset.lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accountId);
          this->__isset.accountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modelId);
          this->__isset.modelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusId);
          this->__isset.statusId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionalityId);
          this->__isset.functionalityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alertFlag);
          this->__isset.alertFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alive);
          this->__isset.alive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentPositionId);
          this->__isset.currentPositionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->action);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventSettings);
          this->__isset.eventSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceServerUrls);
          this->__isset.deviceServerUrls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->liveview);
          this->__isset.liveview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snapshotRecordingEnabled);
          this->__isset.snapshotRecordingEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snapshotRecordingInterval);
          this->__isset.snapshotRecordingInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cloudRecordingEnabled);
          this->__isset.cloudRecordingEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceDetails::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceDetails");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->port);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->login);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->lat);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("lng", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->lng);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("accountId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->accountId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("modelId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->modelId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("statusId", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->statusId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("functionalityId", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->functionalityId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("alertFlag", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->alertFlag);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("alive", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->alive);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("currentPositionId", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->currentPositionId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->action);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("eventSettings", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->eventSettings);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("deviceServerUrls", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->deviceServerUrls);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("liveview", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->liveview);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("snapshotRecordingEnabled", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->snapshotRecordingEnabled);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("snapshotRecordingInterval", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->snapshotRecordingInterval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cloudRecordingEnabled", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->cloudRecordingEnabled);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TagInfo::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t TagInfo::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t TagInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagId);
          this->__isset.tagId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macAddress);
          this->__isset.macAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TagInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TagInfo");
  xfer += oprot->writeFieldBegin("tagId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("macAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->macAddress);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IndoorLocationInfo::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t IndoorLocationInfo::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t IndoorLocationInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mapId);
          this->__isset.mapId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndoorLocationInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndoorLocationInfo");
  xfer += oprot->writeFieldBegin("mapId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mapId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->x);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->y);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IndoorMapInfo::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t IndoorMapInfo::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t IndoorMapInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mapId);
          this->__isset.mapId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->mapBlob);
          this->__isset.mapBlob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndoorMapInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndoorMapInfo");
  xfer += oprot->writeFieldBegin("mapId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mapId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mapBlob", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->mapBlob);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}}} // namespace
